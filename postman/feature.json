{
	"info": {
		"_postman_id": "aaf08ac4-d619-4cda-bc6d-4491a60dc2ab",
		"name": "Explore With Me - Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21760602"
	},
	"item": [
		{
			"name": "Новый пользователь",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"createdUserId\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"email\": \"newuser@email\",\n   \"name\":\"NewUser\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Новая категория",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"createdCategoryId\", jsonData.id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Что-то с чем-то\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Новый эвент",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"createdEventId\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"annotation\":\"Эвент непонятно о чём\",\n    \"category\":{{createdCategoryId}},\n    \"description\":\"Кто-то, где-то, когда-то......\",\n    \"eventDate\":\"2024-01-01 00:00:00\",\n    \"location\":\n       {\n         \"lat\": 55.754167,\n         \"lon\": 37.62\n       },\n    \"paid\": true,\n    \"participantLimit\": 10,\n    \"requestModeration\": false,\n    \"title\": \"Какой-то эвент\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{createdUserId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация эвента",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var id = ",
							"",
							"pm.test(\"Эвент должен быть опубликован\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.state).to.eql('PUBLISHED');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId/publish",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId",
						"publish"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{createdEventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ещё пользователь",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"anotherUserId\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"email\": \"another@email\",\n   \"name\":\"AnotherUser\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Новый запрос на участие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/requests?eventId={{createdEventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{createdEventId}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{anotherUserId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"comment1Id\", jsonData.id);",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Пользователь должен содержать поля: id, userId, eventId, comment, created, lastChange\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('userId');",
							"pm.expect(target).to.have.property('eventId');",
							"pm.expect(target).to.have.property('comment');",
							"pm.expect(target).to.have.property('created');",
							"pm.expect(target).to.have.property('lastChange');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"comment\": \"Комментарий пользователя 2 к событию 1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{anotherUserId}}"
						},
						{
							"key": "eventId",
							"value": "{{createdEventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление существующего комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код ошибки 409\", function () {",
							"    pm.response.to.have.status(409);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"comment\": \"Комментарий пользователя 1 к событию 1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{anotherUserId}}"
						},
						{
							"key": "eventId",
							"value": "{{createdEventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ещё один эвент",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"anotherEventId\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"annotation\":\"Вообще хрень какая-то\",\n    \"category\":{{createdCategoryId}},\n    \"description\":\"Непонятное описание непонятного эвента\",\n    \"eventDate\":\"2024-01-02 00:00:00\",\n    \"location\":\n       {\n         \"lat\": 56.754167,\n         \"lon\": 35.62\n       },\n    \"paid\": false,\n    \"participantLimit\": 10,\n    \"requestModeration\": false,\n    \"title\": \"Ещёакой-то эвент\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{anotherUserId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация эвента 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Эвент должен быть опубликован\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.state).to.eql('PUBLISHED');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId/publish",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId",
						"publish"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{anotherEventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ещё запрос на участие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/requests?eventId={{anotherEventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{anotherEventId}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{createdUserId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ещё один комментарий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Пользователь должен содержать поля: id, userId, eventId, comment, created, lastChange\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('userId');",
							"pm.expect(target).to.have.property('eventId');",
							"pm.expect(target).to.have.property('comment');",
							"pm.expect(target).to.have.property('created');",
							"pm.expect(target).to.have.property('lastChange');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"comment\": \"Комментарий пользователя 1 к событию 2\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{createdUserId}}"
						},
						{
							"key": "eventId",
							"value": "{{anotherEventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение списка комментариев пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test get all\", function () {",
							"   var jsonData = pm.response.json();",
							"   pm.expect(jsonData.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/:userId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{createdUserId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Комментарий должен быть обновлён\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(1);",
							"    pm.expect(jsonData.comment).to.eql('Обновлённый комментарий пользователя 1 к событию 1');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"comment\": \"Обновлённый комментарий пользователя 1 к событию 1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{createdUserId}}"
						},
						{
							"key": "commentId",
							"value": "{{comment1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Модерация комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Комментарий должен быть отмодерирован\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(1);",
							"    pm.expect(jsonData.comment).to.eql('Moderated');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"comment\": \"Moderated\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "{{comment1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Пользователь 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"user3Id\", jsonData.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"email\": \"user3@email\",\n   \"name\":\"User3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос пользователя 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/requests?eventId={{createdEventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{createdEventId}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user3Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментарий пользователя 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Пользователь должен содержать поля: id, userId, eventId, comment, created, lastChange\", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('userId');",
							"pm.expect(target).to.have.property('eventId');",
							"pm.expect(target).to.have.property('comment');",
							"pm.expect(target).to.have.property('created');",
							"pm.expect(target).to.have.property('lastChange');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"comment\": \"Комментарий пользователя 3 к событию 1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{user3Id}}"
						},
						{
							"key": "eventId",
							"value": "{{createdEventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение события с комментариями",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Test get all comments\", function () {",
							"   var jsonData = pm.response.json();",
							"   pm.expect(jsonData.comments.length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events/:id/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":id",
						"comments"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{createdEventId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "createdUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdCategoryId",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdEventId",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment1Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "anotherUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "anotherEventId",
			"value": "",
			"type": "string"
		},
		{
			"key": "user3Id",
			"value": "",
			"type": "string"
		}
	]
}